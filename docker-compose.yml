version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - APP_ENV=${APP_ENV}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - API_KEY=${API_KEY}
      - API_V1_STR=${API_V1_STR}
      - PROJECT_NAME=${PROJECT_NAME}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - DOCKER_HOST=tcp://docker-proxy:2375
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_started
      docker-proxy:
        condition: service_started
    user: root

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=container_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=/api/v1
    depends_on:
      - backend
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  docker-proxy:
    image: alpine/socat
    command: tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    expose:
      - "2375"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:8.2.0
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    expose:
      - "9100"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: 